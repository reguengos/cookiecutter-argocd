#!/usr/bin/env bash
[[ -v VERBOSE ]] && set -x
set -eo pipefail

#
# deploy-chart is a helper utility which reads a yaml config file
# and deploys the configured deployments for the workload
#
# usage:
#   deploy-chart path/to/workload/config.yaml deployment-name path/to/kubeconfig
#
# dependencies:
#   - bash 4+
#   - yq (https://github.com/mikefarah/yq)
#   - kubectl
#

# prints an info log to stdout
info() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')][$(basename "$0")][inf]: $*"
}

# prints a warn log to stdout
warn() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')][$(basename "$0")][wrn]: $*"
}

# prints an error to stderr and exits with code 1
err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')][$(basename "$0")][err]: $*" >&2
  exit 1
}

function _check_dependencies() {
  [[ ! -x "$(command -v kubectl)" ]] && err "'kubectl' is either not available or not executable"
  [[ ! -x "$(command -v yq)" ]] && err "'yq' is either not available or not executable"
  return true
}

function main() {
  _check_dependencies

  local file=$1
  local specified_deployment=$2
  local kubeconfig_path=$3

  info "configuration: ${file}"
  info "deployment: ${specified_deployment}"
  info "kubeconfig: ${kubeconfig_path}"

  [[ -z "${file}" ]] && err "provide config file path as 1st argument"
  [[ -z "${specified_deployment}" ]] && err "provide deployment name as 2nd argument"
  [[ -z "${kubeconfig_path}" ]] && err "provide kubeconfig path as 3rd argument; context must be set to the correct value already"

  cd "$(dirname "${file}")"

  # helper to read from designated yaml file; uses local var of func main
  function _read() {
    yq read "$(basename "${file}")" "$@"
  }

  enabled=$(_read "enabled" --defaultValue "false") && \
    [[ "${enabled}" == "false" ]] && err "workload in '${file}' is either disabled or missing the 'enabled' key, skipping ..."
  deployment_exists=$(_read "deployments.(name==${specified_deployment})") && \
    [[ -z "${deployment_exists}" ]] && err "given deployment was not found in given configuration file"
  deployment_enabled=$(_read "deployments.(name==${specified_deployment}).enabled" --defaultValue "true") && \
    [[ "${deployment_enabled}" == "false" ]] && err "deployment is disabled"

  namespace=$(_read "namespace") && \
    [[ -z "${namespace}" ]] && warn "key 'namespace' is empty in the configuration file, no namespace will be passed to kubectl"
  release_name=$(_read "release_name" --defaultValue "untitled-release")
  deployment_release_name=$(_read "deployments.(name==${specified_deployment}).release_name" --defaultValue "${release_name}")
  deployment_output_path="$(_read "output_path" --defaultValue "./manifests")/${specified_deployment}/${deployment_release_name}"
  [[ ! -d "${deployment_output_path}" ]] && err "manifests do not exist at ${deployment_output_path}; lookup executed from $(pwd); have they been rendered?"
  info "working directory: $(pwd)"
  info "manifests: ${deployment_output_path}"

  flags=()
  [[ -n "${namespace}" ]] && flags+=("--namespace=${namespace}")
  info "kubectl apply:"
  kubectl --kubeconfig "${kubeconfig_path}" "${flags[@]}" apply --recursive --filename "${deployment_output_path}"

  info "done"
  return
}

# $1 file to process
# $2 deployment name in given config file
# $3 path to the kubeconfig file (expects the context to be set respectively)

main "$1" "$2" "$3"
